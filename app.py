# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12x4NjNCZIJEBS5Y26Z6307pZM7iqtQiM
"""

from flask import Flask, request, jsonify
import random
import openai
import os

# Initialize Flask app
app = Flask(__name__)

# Set OpenAI API Key
openai.api_key = os.getenv("OPENAI_API_KEY")  # Fetch from environment variables

# Step 1: Training Data
training_data = {
    "Question": {
        "inputs": ["how are you doing", "Why are you doing this?", "are you a person?", "What's up", "do you want to go to NYC?", "hey what's up"],
        "responses": ["dude don't ask me", "yea yea", "idk bro idk"]
    },
    "Love": {
        "inputs": ["I love you", "you're so cute", "you look so beautiful", "how are you this beautiful?"],
        "responses": ["yea yea", "bleh", "debatable", "ehh", "yea ik", "booo"]
    },
    "Sexual": {
        "inputs": ["i wanna eat you", "you're so hot", "you're sexy babe", "i wanna kiss you"],
        "responses": ["Ewwwwwwww", "you're weird", "booo"]
    }
}

# Step 2: Fallback Responses
fallback_responses = [
    "you're a watermelon squash",
    "wanna help me murder somebody?",
    "ur boring",
    "i'm gonna sleep",
    "Kay Kay",
    "yea idc",
    "whatever",
    "Sleep?",
    "You raccoon",
    "ur a nincompoop"
]

# Step 3: GPT Classification
def gpt_classify(user_input):
    messages = [
        {"role": "system", "content": "You are a classifier that categorizes user input into one of these categories: Question, Love, Sexual."},
        {"role": "user", "content": f"Classify this input: '{user_input}' into one of the categories: Question, Love, Sexual. Respond with only the category name."}
    ]
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.0
    )
    category = response['choices'][0]['message']['content'].strip()
    return category if category in training_data.keys() else None

# Step 4: Get Response from Training Data
def get_response(user_input):
    if random.random() < 0.5:  # 50% chance for fallback
        return random.choice(fallback_responses)

    category = gpt_classify(user_input)
    if category:
        return random.choice(training_data[category]["responses"])
    else:
        return random.choice(fallback_responses)

# Step 5: Chat Endpoint
@app.route('/chat', methods=['POST'])
def chat():
    """
    Endpoint to handle chat requests.
    Expects a JSON payload with 'message' field.
    """
    data = request.json
    user_input = data.get('message')
    if not user_input:
        return jsonify({"error": "Message is required!"}), 400

    response = get_response(user_input)
    return jsonify({"response": response})

# Step 6: Health Check Endpoint
@app.route('/')
def health_check():
    return "Chatbot is running!"

# Run the app
if __name__ == '__main__':
    app.run(debug=True)